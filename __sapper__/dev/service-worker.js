(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1701618768771;

	const files = [
		"/service-worker-index.html",
		"/ajax/libs/font-awesome/5.10.0/css/all.min.css",
		"/ajax/libs/font-awesome/5.10.0/webfonts/fa-brands-400-1.eot",
		"/ajax/libs/font-awesome/5.10.0/webfonts/fa-brands-400.eot",
		"/ajax/libs/font-awesome/5.10.0/webfonts/fa-brands-400.svg",
		"/ajax/libs/font-awesome/5.10.0/webfonts/fa-brands-400.ttf",
		"/ajax/libs/font-awesome/5.10.0/webfonts/fa-brands-400.woff",
		"/ajax/libs/font-awesome/5.10.0/webfonts/fa-brands-400.woff2",
		"/ajax/libs/font-awesome/5.10.0/webfonts/fa-regular-400-1.eot",
		"/ajax/libs/font-awesome/5.10.0/webfonts/fa-regular-400.eot",
		"/ajax/libs/font-awesome/5.10.0/webfonts/fa-regular-400.svg",
		"/ajax/libs/font-awesome/5.10.0/webfonts/fa-regular-400.ttf",
		"/ajax/libs/font-awesome/5.10.0/webfonts/fa-regular-400.woff",
		"/ajax/libs/font-awesome/5.10.0/webfonts/fa-regular-400.woff2",
		"/ajax/libs/font-awesome/5.10.0/webfonts/fa-solid-900-1.eot",
		"/ajax/libs/font-awesome/5.10.0/webfonts/fa-solid-900.eot",
		"/ajax/libs/font-awesome/5.10.0/webfonts/fa-solid-900.svg",
		"/ajax/libs/font-awesome/5.10.0/webfonts/fa-solid-900.ttf",
		"/ajax/libs/font-awesome/5.10.0/webfonts/fa-solid-900.woff",
		"/ajax/libs/font-awesome/5.10.0/webfonts/fa-solid-900.woff2",
		"/css/bootstrap.min.css",
		"/css/style.css",
		"/img/Sark-black.svg",
		"/img/Sark-white.svg",
		"/img/Sark.png",
		"/img/about.jpg",
		"/img/carousel-1.jpg",
		"/img/carousel-2.jpg",
		"/img/contact-sark-construction.jpg",
		"/img/fact-1.jpg",
		"/img/fact-2.jpg",
		"/img/fact-3.jpg",
		"/img/fact-4.jpg",
		"/img/feature.jpg",
		"/img/service-1.jpg",
		"/img/service-2.jpg",
		"/img/service-3.jpg",
		"/img/service-4.jpg",
		"/img/service-5.jpg",
		"/img/service-6.jpg",
		"/img/team-1.jpg",
		"/img/team-2.jpg",
		"/img/team-3.jpg",
		"/img/testimonial-1.jpg",
		"/img/testimonial-2.jpg",
		"/jquery-3.4.1.min.js",
		"/js/main.js",
		"/lib/animate/animate.min.css",
		"/lib/easing/easing.min.js",
		"/lib/owlcarousel/assets/owl.carousel.min.css",
		"/lib/owlcarousel/assets/owl.video.play.png",
		"/lib/owlcarousel/owl.carousel.min.js",
		"/lib/waypoints/waypoints.min.js",
		"/lib/wow/wow.min.js",
		"/npm/bootstrap-icons@1.4.1/font/bootstrap-icons.css",
		"/npm/bootstrap-icons@1.4.1/font/fonts/bootstrap-icons.woff",
		"/npm/bootstrap-icons@1.4.1/font/fonts/bootstrap-icons.woff2",
		"/npm/bootstrap@5.0.0/dist/js/bootstrap.bundle.min.js"
	];

	const shell = [
		"/client/client.9eded4cb.js",
		"/client/inject_styles.5607aec6.js",
		"/client/index.c982f686.js",
		"/client/about.75796671.js",
		"/client/index.87b6f044.js",
		"/client/_slug_.54822ca1.js",
		"/client/sapper-dev-client.1e7a4a5e.js"
	];

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const staticAssets = new Set(to_cache);

	self.addEventListener('install', event => {
		event.waitUntil(
			caches
				.open(ASSETS)
				.then(cache => cache.addAll(to_cache))
				.then(() => {
					self.skipWaiting();
				})
		);
	});

	self.addEventListener('activate', event => {
		event.waitUntil(
			caches.keys().then(async keys => {
				// delete old caches
				for (const key of keys) {
					if (key !== ASSETS) await caches.delete(key);
				}

				self.clients.claim();
			})
		);
	});


	/**
	 * Fetch the asset from the network and store it in the cache. 
	 * Fall back to the cache if the user is offline.
	 */
	async function fetchAndCache(request) {
		const cache = await caches.open(`offline${timestamp}`);

		try {
			const response = await fetch(request);
			cache.put(request, response.clone());
			return response;
		} catch (err) {
			const response = await cache.match(request);
			if (response) return response;

			throw err;
		}
	}

	self.addEventListener('fetch', event => {
		if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

		const url = new URL(event.request.url);

		// don't try to handle e.g. data: URIs
		const isHttp = url.protocol.startsWith('http');
		const isDevServerRequest = url.hostname === self.location.hostname && url.port !== self.location.port;
		const isStaticAsset = url.host === self.location.host && staticAssets.has(url.pathname);
		const skipBecauseUncached = event.request.cache === 'only-if-cached' && !isStaticAsset;

		if (isHttp && !isDevServerRequest && !skipBecauseUncached) {
			event.respondWith(
				(async () => {
					// always serve static files and bundler-generated assets from cache.
					// if your application has other URLs with data that will never change,
					// set this variable to true for them and they will only be fetched once.
					const cachedAsset = isStaticAsset && await caches.match(event.request);

					// for pages, you might want to serve a shell `service-worker-index.html` file,
					// which Sapper has generated for you. It's not right for every
					// app, but if it's right for yours then uncomment this section
					/*
					if (!cachedAsset && url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
						return caches.match('/service-worker-index.html');
					}
					*/

					return cachedAsset || fetchAndCache(event.request);
				})()
			);
		}
	});

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
